<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
	 http://code.alibabatech.com/schema/dubbo
	 http://code.alibabatech.com/schema/dubbo/dubbo.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/task
     http://www.springframework.org/schema/task/spring-task.xsd"
       default-lazy-init="false">


    <!--1 自动扫描 将标注Spring注解的类自动转化Bean  Spring是父容器，SpringMVC是其子容器，
        并且在Spring父容器中注册的Bean对于SpringMVC容器中是可见的，而在SpringMVC容器中注册的Bean对于Spring父容器中是不可见的，
        也就是子容器可以看见父容器中的注册的Bean，反之就不行 -->
    <context:component-scan base-package="com">
        <!--排除springMvc 个自管理容器，框架分离-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--2 加载数据资源属性文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:system.properties"/>
    </bean>

    <!--数据库连接配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="${jdbc.maxPoolSize}"/>
        <property name="initialSize" value="${jdbc.initialPoolSize}"/>
        <property name="minIdle" value="${jdbc.minPoolSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="3000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="select 'x' "/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
    </bean>


    <!-- 定义事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 事务相关控制配置：例如配置事务的传播机制 -->
    <tx:advice id="financeAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="do*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 把事务控制在serviceImpl层 -->
    <aop:config>
        <aop:pointcut id="financePoint"
                      expression="execution(* com.lgb.service.serviceImpl.*ServiceImpl.*(..))"/>
        <aop:advisor pointcut-ref="financePoint" advice-ref="financeAdvice"/>
    </aop:config>


    <!--配置sessionfactory的工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/PersonMapper.xml"></property>

    </bean>

    <!--SqlSessionTemplate是线程安全的，这个类负责管理MyBatis的SqlSession,调用MyBatis的SQL方法,
    可以被多个DAO所共享使用-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 引入公共dubbo配置文件 -->
   <!-- <import resource="classpath*:dubbo-service.xml"/>-->

    <!--导入kafka的生产着-->


    <!-- Dubbo服务配置 -->
   <!-- <dubbo:application name="${dubbo.application.name}"/>
    <dubbo:registry protocol="zookeeper" address="${dubbo.registry.zookeeper.address}"/>
    <dubbo:protocol name="dubbo" port="${dubbo.protocol.port}"/>-->
    <!-- 全局 提供者配置, 超 时时间是30秒, 重试次数为0 -->


    <!-- 缺省的异步任务线程池 -->
    <task:annotation-driven executor="asyncExecutor"/>
    <task:executor id="asyncExecutor" pool-size="64-128"
                   queue-capacity="10"/>
</beans>
